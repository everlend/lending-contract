//! Error types

use num_derive::FromPrimitive;
use solana_program::{
    decode_error::DecodeError,
    msg,
    program_error::{PrintProgramError, ProgramError},
};
use thiserror::Error;

/// Errors that may be returned by the Template program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum LendingError {
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("Input account owner is not the program address")]
    InvalidAccountOwner,
    /// The calculation failed.
    #[error("Calculation failure")]
    CalculationFailure,
    /// Collateral ratio check failed, returned if user borrows too much or withdraws too much collateral.
    #[error("Collateral ratio check failed")]
    CollateralRatioCheckFailed,
    /// Collateral healthy check failed, returned if user try
    /// liquidate obligation when ratio is less than healthy.
    #[error("Collateral healthy check failed")]
    CollateralHealthyCheckFailed,
    /// Invalid oracle
    #[error("Invalid oracle")]
    InvalidOracle,
    /// Invalid oracle config
    #[error("Invalid oracle config")]
    InvalidOracleConfig,
}

impl PrintProgramError for LendingError {
    fn print<E>(&self) {
        msg!("Error: {}", &self.to_string());
    }
}

impl From<LendingError> for ProgramError {
    fn from(e: LendingError) -> Self {
        ProgramError::Custom(e as u32)
    }
}

impl<T> DecodeError<T> for LendingError {
    fn type_of() -> &'static str {
        "LendingError"
    }
}
